{
  "version": 3,
  "sources": ["../../node_modules/fast-safe-stringify/index.js", "../../node_modules/lambda-log/lib/LogMessage.js", "../../node_modules/lambda-log/lib/LambdaLog.js", "../../node_modules/lambda-log/index.js", "../../src/lambda/processMessage.ts"],
  "sourcesContent": ["module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n", "const stringify = require('fast-safe-stringify');\n\nconst symbols = {\n  LOG: Symbol('log'),\n  META: Symbol('meta'),\n  ERROR: Symbol('error'),\n  OPTS: Symbol('opts')\n};\n\n/**\n * The LogMessage class is a private/internal class that is used for generating log messages. All log methods return an instance of LogMessage allowing for a chainable api.\n * Having a seperate class and instance for each log allows chaining and the ability to further customize this module in the future without major breaking changes. The documentation\n * provided here is what is available to you for each log message.\n */\nclass LogMessage {\n  /**\n   * Constructor for LogMessage\n   * @class\n   * @param {object}              log        Object containing all the information for a log.\n   * @param {string}              log.level  The log level.\n   * @param {*}                   log.msg    The message for the log.\n   * @param {object}              [log.meta] Metadata attached to the log.\n   * @param {string[]|Function[]} [log.tags] Additional tags to attach to the log.\n   * @param {object}              opts       Configuration options from LambdaLog.\n   */\n  constructor(log, opts) {\n    this[symbols.LOG] = log;\n    this[symbols.META] = {};\n    this[symbols.ERROR] = null;\n    this[symbols.OPTS] = opts;\n\n    const { meta, tags } = this[symbols.LOG];\n    if(meta && (typeof meta !== 'object' || Array.isArray(meta))) {\n      this[symbols.LOG].meta = { meta };\n    }\n\n    if(!meta) this[symbols.LOG].meta = {};\n    if(!tags) this[symbols.LOG].tags = [];\n\n    // If `msg` is an Error-like object, use the message and add the `stack` to `meta`\n    if(LogMessage.isError(log.msg)) {\n      const err = log.msg;\n      this[symbols.ERROR] = err;\n      this[symbols.META].stack = err.stack;\n      this[symbols.LOG].msg = err.message;\n    }\n  }\n\n  /**\n   * String log level of the message.\n   * @type {string}\n   */\n  get level() {\n    return this[symbols.LOG].level;\n  }\n\n  /**\n   * The message for the log. If an Error was provided, it will be the message of the error.\n   * @type {string}\n   */\n  get msg() {\n    return this[symbols.LOG].msg;\n  }\n\n  /**\n   * Update the message for this log to something else.\n   * @param {string} msg A string to update the message with.\n   */\n  set msg(msg) {\n    this[symbols.LOG].msg = msg;\n  }\n\n  /**\n   * Alias for `this.msg`.\n   * @type {string}\n   */\n  get message() {\n    return this.msg;\n  }\n\n  /**\n   * Alias for `this.msg = 'New message';`\n   * @param {string} msg A string to update the message with.\n   */\n  set message(msg) {\n    this.msg = msg;\n  }\n\n  /**\n   * The fully compiled metadata object for the log. Includes global and dynamic metadata.\n   * @type {object}\n   */\n  get meta() {\n    const opts = this[symbols.OPTS];\n\n    let meta = {\n      ...this[symbols.META],\n      ...this[symbols.OPTS].meta,\n      ...this[symbols.LOG].meta\n    };\n\n    if(opts.dynamicMeta && typeof opts.dynamicMeta === 'function') {\n      const dynMeta = opts.dynamicMeta.call(this, this, opts);\n\n      if(typeof dynMeta === 'object') {\n        meta = Object.assign(meta, dynMeta);\n      }\n    }\n\n    for(const [key, val] of Object.entries(meta)) {\n      if(typeof val !== 'object') continue;\n      if(LogMessage.isError(val)) {\n        meta[key] = LogMessage.stubError(val);\n      }\n    }\n\n    return meta;\n  }\n\n  /**\n   * Set additional metadata on the log message.\n   * @param {object} obj An object with properties to append or overwrite in the metadata.\n   */\n  set meta(obj) {\n    this[symbols.LOG].meta = {\n      ...this[symbols.LOG].meta,\n      ...obj\n    };\n  }\n\n  /**\n   * Array of tags attached to this log. Includes global tags.\n   * @type {string[]}\n   */\n  get tags() {\n    const opts = this[symbols.OPTS];\n    const tags = [].concat(opts.tags, this[symbols.LOG].tags);\n\n    return tags.map(tag => {\n      if(typeof tag === 'function') {\n        return tag.call(this, {\n          level: this.level,\n          meta: this.meta,\n          options: opts\n        });\n      }\n\n      const hasVar = tag.match(/(<<(.*)>>)/);\n      if(!hasVar) return tag;\n\n      const varName = hasVar[2];\n      if(varName === 'level') return tag.replace(hasVar[1], this.level);\n\n      return tag;\n    }).filter(tag => tag !== null && tag !== undefined && tag !== '');\n  }\n\n  /**\n   * Appends additional tags to this log message.\n   * @param {string[]|Function[]} tags Array of string tags or enhanced tag functions to append to the tags array.\n   */\n  set tags(tags) {\n    this[symbols.LOG].tags = this[symbols.LOG].tags.concat(tags);\n  }\n\n  /**\n   * The full log object. This is the object used in logMessage.toJSON() and when the log is written to the console.\n   * @returns {object} The full log object.\n   */\n  get value() {\n    const opts = this[symbols.OPTS];\n    return {\n      [opts.levelKey]: opts.levelKey ? this.level : undefined,\n      [opts.messageKey]: this.msg,\n      ...this.meta,\n      [opts.tagsKey]: opts.tagsKey ? this.tags : undefined\n    };\n  }\n\n  /**\n   * Alias of `logMessage.value`.\n   * @returns {object} The full log object.\n   */\n  get log() {\n    return this.value;\n  }\n\n  /**\n   * Throws the log. If an error was not provided, one will be generated for you and thrown. This is useful in cases where you need to log an\n   * error, but also throw it.\n   * @throws {Error} The provided error, or a newly generated error.\n   */\n  get throw() {\n    const err = this[symbols.ERROR] || new Error(this.msg);\n    err.log = this;\n\n    throw err;\n  }\n\n  /**\n   * Returns the compiled log object converted into JSON. This method utilizes `options.replacer` for the replacer function. It also uses\n   * [fast-safe-stringify](https://www.npmjs.com/package/fast-safe-stringify) to prevent circular reference issues.\n   * @param {boolean} [format=false] Enable pretty-printing of the JSON object (4 space indentation).\n   * @returns {string}  Log object stringified as JSON.\n   */\n  toJSON(format) {\n    return stringify(this.value, this[symbols.OPTS].replacer || null, format ? 4 : 0);\n  }\n\n  /**\n   * Checks if value is an Error or Error-like object\n   * @static\n   * @param  {*}         val Value to test\n   * @returns {boolean}  Whether the value is an Error or Error-like object\n   */\n  static isError(val) {\n    return Boolean(val) && typeof val === 'object' && (\n      val instanceof Error || (\n        Object.prototype.hasOwnProperty.call(val, 'message') &&\n        Object.prototype.hasOwnProperty.call(val, 'stack')\n      )\n    );\n  }\n\n  /**\n   * Stubs an Error or Error-like object to include a toJSON method.\n   * @static\n   * @param {Error}    err An Error or Error-like object.\n   * @returns {Error}  The original error stubbed with a toJSON() method.\n   */\n  static stubError(err) {\n    if(typeof err.toJSON === 'function') return err;\n\n    err.toJSON = function () {\n      const keys = [\n        'name',\n        'message',\n        'stack'\n      ].concat(Object.keys(err));\n\n      return keys.reduce((obj, key) => {\n        if(key in err) {\n          const val = err[key];\n\n          if(typeof val === 'function') return obj;\n          obj[key] = val;\n        }\n\n        return obj;\n      }, {});\n    };\n\n    return err;\n  }\n}\n\nLogMessage.symbols = symbols;\n\nmodule.exports = LogMessage;\n", "const EventEmitter = require('events');\nconst LogMessage = require('./LogMessage');\n\nconst symbols = {\n  LEVELS: Symbol('levels')\n};\n\n/**\n * @typedef {object} LambdaLogOptions - Configuration object for LambdaLog.\n * @property {object} [meta={}] Global metadata to be included in all logs.\n * @property {string[]|Function[]} [tags=[]] Global tags to be included in all logs.\n * @property {Function} [dynamicMeta=null] Function that runs for each log that returns additional metadata. See [Dynamic Metadata](#dynamic-metadata).\n * @property {boolean} [debug=false] Enables `log.debug()`.\n * @property {boolean} [dev=false] Enable development mode which pretty-prints JSON to the console.\n * @property {boolean} [silent=false] Disables logging to `console` but messages and events are still generated.\n * @property {Function} [replacer=null] Replacer function for `JSON.stringify()` to allow handling of sensitive data before logs are written. See [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter).\n * @property {object} [logHandler=console] A console-like object containing all standard console functions. Allows logs to be written to any custom location. See [Log Handler](#loghandler).\n * @property {?string} [levelKey=_logLevel] Override the key name for the log level. Set to `null` to remove the key from the output.\n * @property {string} [messageKey=msg] Override the key name for the message.\n * @property {?string} [tagsKey=_tags] Override the key name for the tags. Set to `null` to remove the key from the output.\n */\n\n/**\n * @augments EventEmitter\n */\nclass LambdaLog extends EventEmitter {\n  /**\n   * Constructor for the LambdaLog class. Provided to be utilized in more advanced cases to allow overriding and configuration.\n   * By default, this module will export an instance of this class, but you may access the class and create your own instance\n   * via `log.LambdaLog`.\n   * @class\n   * @param {LambdaLogOptions}                 [options={}] Options for configuring LambdaLog.\n   * @param {object.<string, string|Function>} [levels={}]  Allows adding and customizing log levels. DEPRECATED\n   */\n  constructor(options = {}, levels = {}) {\n    super();\n    /**\n     * Access to the uninstantiated LambdaLog class. This allows more advanced functionality and customization.\n     * @type {LambdaLog}\n     */\n    this.LambdaLog = LambdaLog;\n\n    /**\n     * Access to the uninstantiated LogMessage class. You can override this property to use a custom logging class that\n     * inherits the same methods.\n     * @type {LogMessage}\n     * @since 2.2.0\n     */\n    this.LogMessage = LogMessage;\n\n    /**\n     * @type {LambdaLogOptions}\n     */\n    this.options = {\n      meta: {},\n      tags: [],\n      dynamicMeta: null,\n      debug: false,\n      dev: false,\n      silent: ['true', 'yes', 'y', '1'].includes(process.env.LAMBDALOG_SILENT),\n      replacer: null,\n      logHandler: console,\n      levelKey: '_logLevel',\n      messageKey: 'msg',\n      tagsKey: '_tags',\n      ...options\n    };\n\n    /**\n     * Global configuration for log levels\n     * @type {object}\n     */\n    this[symbols.LEVELS] = {\n      info: 'info',\n      warn: 'warn',\n      error: 'error',\n      debug() {\n        if(this.options.debug) return 'debug';\n        return false;\n      },\n      ...levels\n    };\n\n    /**\n     * Console-like log handler to use for logging messages\n     * @type {object}\n     */\n    this.console = this.options.logHandler;\n\n    const levelsConfig = this[symbols.LEVELS];\n    for(const lvl in levelsConfig) {\n      if(Object.prototype.hasOwnProperty.call(levelsConfig, lvl)) {\n        this.addLevel(lvl, levelsConfig[lvl]);\n      }\n    }\n  }\n\n  /**\n   * Add a new log level to this instance of LambdaLog.\n   * @since 3.0.0\n   * @deprecated\n   * @param {string}          name    The name of the new log level.\n   * @param {string|Function} handler The string name of the `console` method to call or a function that returns a string method name.\n   * @returns {this}          Instance of LambdaLog.\n   */\n  addLevel(name, handler) {\n    this[symbols.LEVELS][name] = handler;\n\n    /**\n     * Shortcut methods for `log.log()`. By default, the following methods are available: `log.info()`, `log.warn()`, `log.error()` and `log.debug()`.\n     * Additional methods will be added for any [custom log levels](#custom-log-levels) provided.<br><br>The provided msg can be any type, although a string\n     * or `Error` is recommended. If `Error` is provided the stack trace is added as metadata to the log as `stack`.\n     * @param {*}             msg       Message to log. Can be any type, but string or `Error` reccommended.\n     * @param {object}        [meta={}] Optional meta data to attach to the log.\n     * @param {string[]}      [tags=[]] Additional tags to append to this log.\n     * @returns {LogMessage}  The LogMessage instance for the log.\n     */\n    this[name] = (msg, meta = {}, tags = []) => this.log(name, msg, meta, tags);\n\n    return this;\n  }\n\n  /**\n   * Generates JSON log message based on the provided parameters and the global configuration. Once the JSON message is created, it is properly logged to the `console`\n   * and emitted through an event. If an `Error` or `Error`-like object is provided for `msg`, it will parse out the message and include the stacktrace in the metadata.\n   * @throws {Error} If improper log level is provided.\n   * @param  {string} level Log level (`info`, `debug`, `warn`, `error` or a [custom log level](#custom-log-levels))\n   * @param  {*}      msg   Message to log. Can be any type, but string or `Error` reccommended.\n   * @param  {object} [meta={}]  Optional meta data to attach to the log.\n   * @param  {string[]}  [tags=[]]  Additional tags to append to this log.\n   * @returns {LogMessage|boolean}  Returns instance of LogMessage or `false` if `level = \"debug\"` and `options.debug = false`. May also return `false` when a [custom log level](#custom-log-levels) handler function prevents the log from being logged.\n   */\n  log(level, msg, meta = {}, tags = []) {\n    if(!Object.prototype.hasOwnProperty.call(this[symbols.LEVELS], level)) {\n      throw new Error(`\"${level}\" is not a valid log level`);\n    }\n\n    const message = new this.LogMessage({\n      level,\n      msg,\n      meta,\n      tags\n    }, this.options);\n\n    let method = this[symbols.LEVELS][level];\n\n    if(typeof method === 'function') {\n      method = method.call(this, message);\n    }\n\n    if(!method) return false;\n\n    if(!this.options.silent) {\n      this.console[method](message.toJSON(this.options.dev));\n    }\n\n    /**\n     * The log event is emitted (using EventEmitter) for every log generated. This allows for custom integrations, such as logging to a thrid-party service.\n     * This event is emitted with the [LogMessage](#logmessage) instance for the log. You may control events using all the methods of EventEmitter.\n     * @event LambdaLog#log\n     * @type {LogMessage}\n     */\n    this.emit('log', message);\n    return message;\n  }\n\n  /**\n   * Generates a log message if `test` is a falsy value. If `test` is truthy, the log message is skipped and returns `false`. Allows creating log messages without the need to\n   * wrap them in an if statement. The log level will be `error`.\n   * @since  1.4.0\n   * @param  {*}                    test      A value which is tested for a falsy value.\n   * @param  {*}                    msg       Message to log if `test` is falsy. Can be any type, but string or `Error` reccommended.\n   * @param  {object}               [meta={}] Optional meta data to attach to the log.\n   * @param  {string[]|Function[]}  [tags=[]] Additional tags to append to this log.\n   * @returns {LogMessage|boolean}  The LogMessage instance for the log or `false` if test passed.\n   */\n  assert(test, msg, meta = {}, tags = []) {\n    if(test) return false;\n    return this.log('error', msg, meta, tags);\n  }\n\n  /**\n   * Generates a log message with the result or error provided by a promise. Useful for debugging and testing.\n   * @since 2.3.0\n   * @param  {Promise}              promise   A promise or promise-like object to retrieve a value from.\n   * @param  {object}               [meta={}] Optional meta data to attach to the log.\n   * @param  {string[]|Function[]}  [tags=[]] Additional tags to append to this log.\n   * @returns {Promise<LogMessage>} A new Promise that resolves with the LogMessage object after the promise completes.\n   */\n  result(promise, meta = {}, tags = []) {\n    if(!promise || typeof promise.then !== 'function') {\n      throw new Error('A promise must be provided as the first argument');\n    }\n\n    const wrapper = new Promise(resolve => {\n      promise\n        .then(value => resolve(this.log('info', value, meta, tags)))\n        .catch(err => resolve(this.log('error', err, meta, tags)));\n    });\n\n    return wrapper;\n  }\n}\n\nLambdaLog.symbols = symbols;\n\nmodule.exports = LambdaLog;\n", "const LambdaLog = require('./lib/LambdaLog');\n/**\n * Instance of the LambdaLog class which is exported when calling `require('lambda-log')`. For more\n * advanced usage, you can create a new instance of the LambdaLog class via `new log.LambdaLog()`.\n * @type {LambdaLog}\n */\nconst log = new LambdaLog();\n\nmodule.exports = log;\n", "import { Context, S3ObjectCreatedNotificationEvent } from 'aws-lambda'\r\nimport { LambdaLog } from 'lambda-log'\r\n\r\nconst DEBUG_LOGS: boolean = ( process.env.DEBUG_LOGS == 'true' ) ?? false\r\nconst FAILURE_TEST: boolean = ( process.env.FAILURE_TEST == 'true' ) ?? false\r\n\r\nconst redactLogProperties: string[] = [ 'AWS_SECRET_ACCESS_KEY', 'AWS_SESSION_TOKEN' ]\r\n\r\nconst log = new LambdaLog( {\r\n    tags: [\r\n        'processing-lambda'\r\n    ],\r\n    debug: DEBUG_LOGS,\r\n    replacer( key: string, value: any ) {\r\n        if ( redactLogProperties.includes( key ) ) {\r\n            return 'redacted'\r\n        }\r\n        return value\r\n    },\r\n} )\r\n\r\n\r\n\r\nexport async function handler( event: S3ObjectCreatedNotificationEvent, context: Context ): Promise<void> {\r\n\r\n    log.debug( event as any )\r\n    log.debug( context as any )\r\n\r\n    if ( FAILURE_TEST ) {\r\n        throw new Error( 'Testing failure for DL Queue' )\r\n    }\r\n\r\n    // Insert processing logic here\r\n\r\n}"],
  "mappings": "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",
  "names": ["module", "module", "log", "module", "LambdaLog", "handler", "module", "LambdaLog", "log"]
}
