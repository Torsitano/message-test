{
 "Resources": {
  "MessageDeploymentS3Cmk41AE5F10": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::698852667105:root"
          ]
         ]
        }
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "KMS CMK used for message queue test",
    "Enabled": true,
    "EnableKeyRotation": true,
    "PendingWindowInDays": 7
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/S3Cmk/Resource"
   }
  },
  "MessageDeploymentS3CmkAlias4E6C80C0": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": "alias/message-testS3Cmk",
    "TargetKeyId": {
     "Fn::GetAtt": [
      "MessageDeploymentS3Cmk41AE5F10",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/S3Cmk/Alias/Resource"
   }
  },
  "MessageDeploymentSqsCmk394754B5": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::698852667105:root"
          ]
         ]
        }
       },
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "MessageDeploymentDeliveryBucket87563450",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "KMS CMK used for message queue test",
    "Enabled": true,
    "EnableKeyRotation": true,
    "PendingWindowInDays": 7
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/SqsCmk/Resource"
   }
  },
  "MessageDeploymentSqsCmkAlias1D17AABC": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": "alias/message-testSqsCmk",
    "TargetKeyId": {
     "Fn::GetAtt": [
      "MessageDeploymentSqsCmk394754B5",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/SqsCmk/Alias/Resource"
   }
  },
  "MessageDeploymentDLQueue400EAAE3": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "KmsMasterKeyId": {
     "Fn::GetAtt": [
      "MessageDeploymentSqsCmk394754B5",
      "Arn"
     ]
    },
    "MessageRetentionPeriod": 21600,
    "QueueName": "message-testDLQueueProd"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/DLQueue/Resource"
   }
  },
  "MessageDeploymentMessageQueue9458F997": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "KmsMasterKeyId": {
     "Fn::GetAtt": [
      "MessageDeploymentSqsCmk394754B5",
      "Arn"
     ]
    },
    "QueueName": "message-testMessageQueueProd",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "MessageDeploymentDLQueue400EAAE3",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/MessageQueue/Resource"
   }
  },
  "MessageDeploymentMessageQueuePolicyDCF39534": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "MessageDeploymentDeliveryBucket87563450",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentMessageQueue9458F997",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "MessageDeploymentMessageQueue9458F997"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/MessageQueue/Policy/Resource"
   }
  },
  "MessageDeploymentDeliveryBucket87563450": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "MessageDeploymentS3Cmk41AE5F10",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "message-test-delivery-bucket-prod-698852667105",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/DeliveryBucket/Resource"
   }
  },
  "MessageDeploymentDeliveryBucketNotifications839F1494": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "MessageDeploymentDeliveryBucket87563450"
    },
    "NotificationConfiguration": {
     "QueueConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "QueueArn": {
        "Fn::GetAtt": [
         "MessageDeploymentMessageQueue9458F997",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "MessageDeploymentMessageQueuePolicyDCF39534",
    "MessageDeploymentMessageQueue9458F997"
   ],
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/DeliveryBucket/Notifications/Resource"
   }
  },
  "MessageDeploymentFailureBucket58A5A2BF": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "MessageDeploymentS3Cmk41AE5F10",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "message-test-failed-delivery-bucket-prod-698852667105",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/FailureBucket/Resource"
   }
  },
  "MessageDeploymentprocessingLambdaServiceRole4F1811B7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/processingLambda/ServiceRole/Resource"
   }
  },
  "MessageDeploymentprocessingLambdaServiceRoleDefaultPolicyD7AA761F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentMessageQueue9458F997",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentSqsCmk394754B5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MessageDeploymentDeliveryBucket87563450",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MessageDeploymentDeliveryBucket87563450",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentS3Cmk41AE5F10",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MessageDeploymentprocessingLambdaServiceRoleDefaultPolicyD7AA761F",
    "Roles": [
     {
      "Ref": "MessageDeploymentprocessingLambdaServiceRole4F1811B7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/processingLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "MessageDeploymentprocessingLambda10B08402": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-698852667105-us-east-1",
     "S3Key": "40d5fd6e169c419d392f212d4ef165046840b84fbfc05bf5c80d42d7ff14a0be.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "MessageDeploymentprocessingLambdaServiceRole4F1811B7",
      "Arn"
     ]
    },
    "Description": "Processes objects put into the S3 Bucket for inbound payloads",
    "Environment": {
     "Variables": {
      "DEBUG_LOGS": "true",
      "FAILURE_TEST": "true",
      "DELIVERY_BUCKET": {
       "Ref": "MessageDeploymentDeliveryBucket87563450"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "message-test-processing-lambda",
    "Handler": "index.handler",
    "MemorySize": 128,
    "Runtime": "nodejs16.x",
    "Timeout": 10
   },
   "DependsOn": [
    "MessageDeploymentprocessingLambdaServiceRoleDefaultPolicyD7AA761F",
    "MessageDeploymentprocessingLambdaServiceRole4F1811B7"
   ],
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/processingLambda/Resource",
    "aws:asset:path": "asset.40d5fd6e169c419d392f212d4ef165046840b84fbfc05bf5c80d42d7ff14a0be",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "MessageDeploymentprocessingLambdaSqsEventSourceMessageStackMessageDeploymentMessageQueueB6CB5BFB9B7524D9": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "FunctionName": {
     "Ref": "MessageDeploymentprocessingLambda10B08402"
    },
    "BatchSize": 1,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "MessageDeploymentMessageQueue9458F997",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/processingLambda/SqsEventSource:MessageStackMessageDeploymentMessageQueueB6CB5BFB/Resource"
   }
  },
  "MessageDeploymentfailureLambdaServiceRole13854892": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/failureLambda/ServiceRole/Resource"
   }
  },
  "MessageDeploymentfailureLambdaServiceRoleDefaultPolicyA3C3F306": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MessageDeploymentDeliveryBucket87563450",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MessageDeploymentDeliveryBucket87563450",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentS3Cmk41AE5F10",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MessageDeploymentFailureBucket58A5A2BF",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MessageDeploymentFailureBucket58A5A2BF",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentSqsCmk394754B5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MessageDeploymentDLQueue400EAAE3",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MessageDeploymentfailureLambdaServiceRoleDefaultPolicyA3C3F306",
    "Roles": [
     {
      "Ref": "MessageDeploymentfailureLambdaServiceRole13854892"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/failureLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "MessageDeploymentfailureLambdaD0E67AE3": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-698852667105-us-east-1",
     "S3Key": "2b67702f31d1a1928a65484cced6ad2311231f8dae2f9a0b4ca4a304169aac53.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "MessageDeploymentfailureLambdaServiceRole13854892",
      "Arn"
     ]
    },
    "Description": "Polls the failed queue to put S3 Objects into the failed Bucket for follow-up",
    "Environment": {
     "Variables": {
      "DL_QUEUE_URL": {
       "Ref": "MessageDeploymentDLQueue400EAAE3"
      },
      "FAILURE_BUCKET": {
       "Ref": "MessageDeploymentFailureBucket58A5A2BF"
      },
      "DEBUG_LOGS": "true",
      "DELIVERY_BUCKET": {
       "Ref": "MessageDeploymentDeliveryBucket87563450"
      },
      "REGION": "us-east-1",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "message-testFailureLambda",
    "Handler": "index.handler",
    "MemorySize": 128,
    "Runtime": "nodejs16.x",
    "Timeout": 30
   },
   "DependsOn": [
    "MessageDeploymentfailureLambdaServiceRoleDefaultPolicyA3C3F306",
    "MessageDeploymentfailureLambdaServiceRole13854892"
   ],
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/failureLambda/Resource",
    "aws:asset:path": "asset.2b67702f31d1a1928a65484cced6ad2311231f8dae2f9a0b4ca4a304169aac53",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "MessageDeploymentFailureLambdaTriggerC7C1B123": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Triggers the failure lambda hourly to get messages from the failure queue",
    "Name": "message-testFailureTrigger",
    "ScheduleExpression": "rate(1 hour)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "MessageDeploymentfailureLambdaD0E67AE3",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/FailureLambdaTrigger/Resource"
   }
  },
  "MessageDeploymentFailureLambdaTriggerAllowEventRuleMessageStackMessageDeploymentfailureLambdaF503FD2704791BC0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "MessageDeploymentfailureLambdaD0E67AE3",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "MessageDeploymentFailureLambdaTriggerC7C1B123",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/MessageDeployment/FailureLambdaTrigger/AllowEventRuleMessageStackMessageDeploymentfailureLambdaF503FD27"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.7",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "MessageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21Qy27DIBD8ltzxtmmk9pxUzaVqlTgfYBG8jdYGnHghVYT49wK2kkslxMzOPoblBVZvsFzIX65U21eajhAOTqpeJKkJvWEIn3gT7z82w1qT5BwUEgVfUn7v0WMWJ1Lu3aBJ3e7iFKb6FYSNVz26nJrZBBvJGIWW5tjKxg4tdgzfBbbeKkeDFSQNhHrQxazgw+bh0EhmdAzrDPNACKnkPufjitYdBj8q/JLnM9lTnvC/usPREHNqiwJzRVq49vMTEsZYGHJpFMU0feAptUeR14COn67LV0jnedExUTV668gg1BP+AUWBKV+DAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "MessageStack/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}